@model YSLProject.Models.RecertificationFollowUp
@{
    ViewData["Title"] = "FollowupS";
    Layout = "~/Views/Shared/_Layoutpopup.cshtml";
}

<style>
    .modal-body .btn-row {
        margin-top: 0rem;
        margin-bottom: 0rem;
        padding-top: 15px;
        padding-bottom: 15px;
    }

    .btn-row {
        border-top: 1px solid #ccc;
        text-align: right;
    }
</style>
@using (Html.BeginForm("FollowupS", "Member", FormMethod.Post,
new
{
   enctype = "multipart/form-data"
}))
{
    @Html.HiddenFor(model => model.MemberId)
    @Html.HiddenFor(model => model.FollowUpID)

    <div class="form-horizontal">
        <div>
            <div class="modal-padding">

                <div class="detail-section">

                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    @*<div class="form-group">
                            <label asp-for="MemberID" class="control-label"></label>
                            <input asp-for="MemberID" class="form-control" />
                            <span asp-validation-for="MemberID" class="text-danger"></span>
                        </div>*@


                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.CurrentStatus, htmlAttributes: new { @class = "control-label " })
                            @Html.TextBoxFor(model => model.CurrentStatus, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })

                            @Html.ValidationMessageFor(model => model.CurrentStatus, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Outcome, htmlAttributes: new { @class = "control-label " })
                            @if (ViewBag.Outcome != null)
                            {
                                @Html.DropDownListFor(model => model.Outcome, (IEnumerable<SelectListItem>)ViewBag.Outcome, htmlAttributes: new { @class = "form-control", @onchange = "OutComeChange(this.value)" })
                            }

                            @Html.ValidationMessageFor(model => model.Outcome, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @{
                                List<SelectListItem> listItems = new List<SelectListItem>();

                                listItems.Add(new SelectListItem
                                {
                                    Text = "Call Family",
                                    Value = "Call Family",
                                    Selected = true
                                });
                                listItems.Add(new SelectListItem
                                {
                                    Text = "Notify CPHL",
                                    Value = "Notify CPHL"
                                });
                            }
                            @Html.LabelFor(model => model.NextStepTask, htmlAttributes: new { @class = "control-label " })
                            @Html.DropDownListFor(model => model.NextStepTask, listItems, htmlAttributes: new { @class = "form-control", @Id = "ddlNextStepTask", @onChange = "ChangeNextTask()" })
                            @Html.TextBoxFor(model => model.NextStepTask, htmlAttributes: new { @class = "form-control", @Id = "NextStepTask", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.NextStepTask, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.NewStatus, htmlAttributes: new { @class = "control-label " })
                            @Html.TextBoxFor(model => model.NewStatus, htmlAttributes: new { @class = "form-control", @Id = "NewStatus", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.NewStatus, "", new { @class = "text-danger" })
                        </div>


                    </div>

                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.PeriodOfTheDay, htmlAttributes: new { @class = "control-label " })
                            @Html.DropDownListFor(model => model.PeriodOfTheDay, (IEnumerable<SelectListItem>)ViewBag.PeriodOfTheDay, htmlAttributes: new { @class = "form-control", @Id = "PeriodOfTheDay" })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label " })
                            @Html.TextAreaFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" }, rows = "2", @style = "width: 100%;" })
                            @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            <label class="control-label ">Internal Notes</label>
                            @Html.EditorFor(model => model.NextStepDueNotes, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NextStepDueNotes, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Nextduedate, htmlAttributes: new { @class = "control-label " })
                            <input id="Nextduedate" asp-for="Nextduedate" da type="date" class="form-control" />
                            @Html.ValidationMessageFor(model => model.Nextduedate, "", new { @class = "text-danger" })
                        </div>
                    </div>


                </div>

            </div>
        </div>
        <div class="form-group row btn-row">
            <div class=" col-md-12 ">
                @{
                    if (Model.NewStatus != null)
                    {
                        <button type="submit" class="btn btn-primary sve"><i class="fa fa-save"></i> Submit</button>
                    }
                    else
                    {
                        <label style="color:red;font-weight:bold">Opps! No more step for add new follow up</label>
                    }
                }

                <a class="btn btn-primary" href="/Member/Workfollow?memberId=@Model.MemberId">Cancel</a>
            </div>

        </div>
    </div>
}
@section Scripts {
    <script>
        $(document).ready(function () {
            var id = $("#Outcome").val();
            $("#ddlNextStepTask").hide();
            OutComeChange(id);
        });

        function ChangeNextTask() {
            $("#NextStepTask").val($("#ddlNextStepTask").val());
        }

        function OutComeChange(id) {
            var CurrentStatus = $("#CurrentStatus").val();
            var NextStepTask = $("#NextStepTask");
            var NewStatus = $("#NewStatus");
            var Nextduedate = $("#Nextduedate");
            var d = new Date();
            var day = ("0" + d.getDate()).slice(-2);
            var month = ("0" + (d.getMonth() + 1)).slice(-2);
            var today = d.getFullYear() + "-" + (month) + "-" + (day);
            Nextduedate.val(today);

            if (id == "Wrong Number" && CurrentStatus == "Follow up") {
                NextStepTask.val("Refer to CPHL");
                NewStatus.val("Requires CPHL Assistance");
            }
            else if (id == "Left Voice Mail" && CurrentStatus == "Follow up") {
                NextStepTask.val("Call Back");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 1);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                $('#Nextduedate').val(today);
            }
            else if (id == "Left Voice Mail" && CurrentStatus == "Follow up") {
                NextStepTask.val("Call Back");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 1);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                $('#Nextduedate').val(today);
            }
            else if (id == "Called five times" && CurrentStatus == "Follow up") {
                NextStepTask.val("Refer to CPHL");
                NewStatus.val("Requires CPHL Assistance");

            }
            else if (id == "FHS mailed/e-mailed recert to member" && CurrentStatus == "Follow up") {
                NextStepTask.val("Call Back");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 5);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }
            else if (id == "Not compliant" && CurrentStatus == "Follow up") {
                NextStepTask.val("Refer to CPHL");
                NewStatus.val("Requires CPHL Assistance");
            }
            else if (id == "Excess Resource – CPHL to advise member" && CurrentStatus == "Follow up") {
                NextStepTask.val("Refer to CPHL");
                NewStatus.val("Requires CPHL Assistance");
            }
            else if (id == "Recert sent to FHS" && CurrentStatus == "Follow up") {
                NextStepTask.val("Review Recert");
                NewStatus.val("Recert in Review");
                d.setDate(d.getDate() + 5);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }
            else if (id == "Recert sent to Medicaid by FHS" && CurrentStatus == "Follow up") {
                NextStepTask.val("Submit Through Edits");
                NewStatus.val("Follow up Through Edits");
                d.setDate(d.getDate() + 14);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }
            else if (id == "Recert Packet sent to Medicaid by member" && CurrentStatus == "Follow up") {
                NextStepTask.val("Call Medicaid Hotline");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 7);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }
            else if (id == "Hospitalized" && CurrentStatus == "Follow up") {
                NextStepTask.val("Call Back");
                NewStatus.val("Follow up");
            }
            else if (id == "OOSA (out of service area)" && CurrentStatus == "Follow up") {
                NextStepTask.val("Call Back");
                NewStatus.val("Follow up");
            }
            else if (id == "Nursing home Long Term" && CurrentStatus == "Follow up") {
                NextStepTask.val("");
                NewStatus.val("To be discharged");
            }
            else if (id == "Medicaid Approved" && CurrentStatus == "Follow up") {
                NextStepTask.val("");
                NewStatus.val("Recertification Approved");
            }
            else if (id == "Medicaid Rejected" && CurrentStatus == "Follow up") {
                NextStepTask.val("");
                NewStatus.val("Recertification Denied");
            }
            else if (id == "Recertification Deferred" && CurrentStatus == "Follow up") {
                NextStepTask.val("Follow-up");
                NewStatus.val("Follow up");
            }

            //  Recert in review
            else if (id == "Check If Packet Approved") {
                NextStepTask.val("Call Medicaid Hotline");
                NewStatus.val("Packet In Review");
                d.setDate(d.getDate() + 7);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }



            //Requires CPHL Assistance
            else if (id == "Left Voice Mail" && CurrentStatus == "Requires CPHL Assistance") {
                NextStepTask.val("Call Back");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 1);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                $('#Nextduedate').val(today);
            }
            else if (id == "Not compliant" && CurrentStatus == "Requires CPHL Assistance") {
                NextStepTask.val("Refer to CPHL");
                NewStatus.val("Requires CPHL Assistance");
            }
            else if (id == "Excess Resource – CPHL to advise member" && CurrentStatus == "Requires CPHL Assistance") {
                NextStepTask.val("Call Family");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 1);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }

            //Follow-up THROUGH EDITS
            else if (id == "Rejected" || id == "Deferred") {
                NextStepTask.val("Call Family");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 1);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }

            //Non-covered
            else if (id == "Deceased" || id == "Relink") {
                NextStepTask.val("Notify CPHL");
                NewStatus.val("");

            }
            else if (id == "PA case" || id == "SSI case") {
                NextStepTask.val("Call member");
                NewStatus.val("Follow up");
                d.setDate(d.getDate() + 1);
                var day = ("0" + d.getDate()).slice(-2);
                var month = ("0" + (d.getMonth() + 1)).slice(-2);
                var today = d.getFullYear() + "-" + (month) + "-" + (day);
                Nextduedate.val(today);
            }
            else if (id == "OOSA" && CurrentStatus == "NonCovered") {
                $("#ddlNextStepTask").show();
                $("#NextStepTask").val($("#ddlNextStepTask").val());
            }
        }
    </script>
}